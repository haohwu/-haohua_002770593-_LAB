/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author whh
 */
public class ViewJPanel extends javax.swing.JPanel {

    private Application application;
    DefaultTableModel viewtableModel;
    Observation selectObservation;
    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel() {
        initComponents();

    }

    ViewJPanel(Application application) {
        initComponents();

        this.application = application;
        this.viewtableModel = (DefaultTableModel) Viewtable.getModel();

        displayObservation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        Id = new javax.swing.JTextField();
        temperature = new javax.swing.JLabel();
        Temperature = new javax.swing.JTextField();
        bloodpressure = new javax.swing.JLabel();
        BloodPressure = new javax.swing.JTextField();
        upatebtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Viewtable = new javax.swing.JTable();
        Viewbtn = new javax.swing.JButton();

        jLabel1.setText("View A Vital Sign");

        id.setText("ID");

        Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdActionPerformed(evt);
            }
        });

        temperature.setText("Temperature");

        bloodpressure.setText("Blood Pressure");

        upatebtn.setText("Update");
        upatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upatebtnActionPerformed(evt);
            }
        });

        Viewtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temperature", "Blood Pressure"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Viewtable);

        Viewbtn.setText("View");
        Viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(temperature)
                    .addComponent(id)
                    .addComponent(bloodpressure))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Id, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(Temperature)
                    .addComponent(BloodPressure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(upatebtn)
                        .addGap(128, 128, 128)
                        .addComponent(Viewbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel1)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id)
                            .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temperature)
                            .addComponent(Temperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bloodpressure)
                            .addComponent(BloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 40, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upatebtn)
                    .addComponent(Viewbtn))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdActionPerformed

    }//GEN-LAST:event_IdActionPerformed

    private void upatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upatebtnActionPerformed
    if(!Id.getText().isEmpty()){   
        Observation o = this.application.getHistory().findObservation(Integer.valueOf(Id.getText()));
        o.setBloodPressure(Double.valueOf(BloodPressure.getText()));
        o.setTemperature(Double.valueOf(Temperature.getText()));
        this.selectObservation.setBloodPressure(Double.valueOf(BloodPressure.getText()));
        this.selectObservation.setTemperature(Double.valueOf(Temperature.getText()));
    }
    else
    {
        JOptionPane.showMessageDialog(null, "Please do the selection");
    }
    }//GEN-LAST:event_upatebtnActionPerformed

    private void ViewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewbtnActionPerformed
        int selectedRow = Viewtable.getSelectedRow();
        if(selectedRow >= 0){
            Observation observation = (Observation) Viewtable.getValueAt(selectedRow, 0);
            
            Id.setText(String.valueOf(observation.getObservationId()));
            Temperature.setText(String.valueOf(observation.getTemperature()));
            BloodPressure.setText(String.valueOf(observation.getBloodPressure()));
        }
        else{
        
        }
    }//GEN-LAST:event_ViewbtnActionPerformed
    public void displayObservation() {
        VitalSignHistory history = this.application.getHistory();

        if (history.getVitalSignHistory().size() > 0) {
            viewtableModel.setRowCount(0);
            for (Observation o : history.getVitalSignHistory()) {
                
                Object row[] = new Object[3];
                row[0] = o.getObservationId();
                row[2] = o.getBloodPressure();
                row[1] = o.getTemperature();
                viewtableModel.addRow(row);
            }
        } else {
            System.out.println("Empty");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BloodPressure;
    private javax.swing.JTextField Id;
    private javax.swing.JTextField Temperature;
    private javax.swing.JButton Viewbtn;
    private javax.swing.JTable Viewtable;
    private javax.swing.JLabel bloodpressure;
    private javax.swing.JLabel id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel temperature;
    private javax.swing.JButton upatebtn;
    // End of variables declaration//GEN-END:variables



}
